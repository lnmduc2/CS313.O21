'use client';
import './globals.scss';
import { Inter } from 'next/font/google';
import { List } from 'postcss/lib/list';
import { useContext, createContext, useState } from 'react';
import { Course, User } from './types';

import IconSearch from '../icons/IconSearch';

const inter = Inter({ subsets: ['latin'] });

export const PageContext = createContext({
    userID: '',
    setUserID: (userID: string) => {},
    userName: '',
    setUserName: (userName: string) => {},
    userList: [],
    setUserList: (userList: User[]) => {},
    courseID: '',
    setCourseID: (courseID: string) => {},
    courseList: [],
    setCourseList: (courseList: Course[]) => {},
    showNoResultsModal: false,
    setShowNoResultsModal: (showNoResultsModal: boolean) => {},
});

export const IndexContext = createContext({
    isLoadingUsers: false,
    setIsLoadingUsers: (isLoadingUsers: boolean) => {},
});

export const metadata = {
    title: 'Create Next App',
    description: 'Generated by create next app',
};

export default function RootLayout({
    children,
}: {
    children: React.ReactNode;
}) {
    const [userID, setUserID] = useState<string>('');
    const [userName, setUserName] = useState<string>('');
    const [userList, setUserList] = useState<User[]>([]);
    const [courseID, setCourseID] = useState<string>('');
    const [courseList, setCourseList] = useState<Course[]>([]);
    const [showNoResultsModal, setShowNoResultsModal] =
        useState<boolean>(false);
    const [isLoadingUsers, setIsLoadingUsers] = useState<boolean>(false);

    return (
        <html lang="en">
            <body className={inter.className}>
                <p className="bg-blue-600 font-bold text-white p-2">
                    Course Recommender System
                </p>
                <div className="bg-yellow-50 flex flex-row h-screen">
                    <div className="bg-green-100 flex flex-row p-2 w-30">
                        <IconSearch />
                        <p>Search</p>
                    </div>

                    <PageContext.Provider
                        value={{
                            userID,
                            setUserID,
                            userName,
                            setUserName,
                            userList,
                            setUserList,
                            courseID,
                            setCourseID,
                            courseList,
                            setCourseList,
                            showNoResultsModal,
                            setShowNoResultsModal,
                        }}
                    >
                        <IndexContext.Provider
                            value={{ isLoadingUsers, setIsLoadingUsers }}
                        >
                            {children}
                        </IndexContext.Provider>
                    </PageContext.Provider>
                </div>
            </body>
        </html>
    );
}
